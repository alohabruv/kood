package main

import (
	"fmt"
	"strings"
)

// Main logic, invoking other functions
func main() {
	fmt.Printf("Welcome to the Cypher Tool!\n\n")

	toEncrypt, encoding, message := getInput() // Takes the needed informateon from func getInput
	var result string

	if toEncrypt {
		switch strings.ToLower(encoding) {
		case "rot13":
			result = encrypt_rot13(message)
		case "reverse":
			result = encrypt_reverse(message)
		case "custom":
			result = encrypt_custom(message)
		default:
			fmt.Println("Invalid input.")
			return
		}

		fmt.Printf("Encrypted message using %s:\n%s", encoding, result)
	} else {
		switch strings.ToLower(encoding) {
		case "rot13":
			result = decrypt_rot13(message)
		case "reverse":
			result = decrypt_reverse(message)
		case "custom":
			result = decrypt_custom(message)
		default:
			fmt.Println("Invalid input.")
			return
		}

		fmt.Printf("Decrypted message using %s:\n%s", encoding, result)
	}
}

// Get the input data required for the operation
func getInput() (toEncrypt bool, encoding string, message string) {
	var cypher int
	var operation int
	fmt.Printf("Select operation (1/2):\n1: Encrypt.\n2: Decrypt.\n")
	fmt.Scanln(&operation)
	fmt.Println()

	for { // Starts a loop checking if input matches
		if operation == 1 {
			toEncrypt = true
			break // Break command stops loop
		} else if operation == 2 {
			toEncrypt = false
			break
		} else { // If it does not, starts from beginning
			fmt.Printf("Choose a correct operation:\n")
			fmt.Scanln(&operation)
			fmt.Println()
		}
	}

	fmt.Printf("Select cypher (1/3):\n1: ROT13.\n2: Reverse.\n3: Custom.\n")
	fmt.Scanln(&cypher)
	fmt.Println()

	for { // Creates a loop, checking if one of the inputs matches
		if cypher == 1 {
			encoding = "rot13"
			break
		} else if cypher == 2 {
			encoding = "reverse"
			break
		} else if cypher == 3 {
			encoding = "custom"
			break
		} else { // If it does not match, asks to choose again
			fmt.Printf("Choose a correct cypher:\n")
			fmt.Scanln(&cypher)
			fmt.Println()
		}
	}

	fmt.Println("Enter the message:")
	fmt.Scanln(&message)
	message = strings.TrimSpace(message)
	fmt.Println()
	return toEncrypt, encoding, message
}

// Encrypt the message with rot13
func encrypt_rot13(s string) string {
	var vastus string     // Tekitab var vastus
	for _, c := range s { // Alustab loopi korrates üle kõik tähed mis "s" ette andis, lisab need 'c'-le
		if c >= 'a' && c <= 'z' { // Kontrollib kas on suur või väike täht nii, et kui c on vahemikus a-z on väike täht
			c = 'a' + (c-'a'+13)%26 // Lahutab a väärtuse 'c'st, et 'a' oleks 0, liidab 13. Modulo hoiab 26 märgi vahemikus
		} else if c >= 'A' && c <= 'Z' {
			c = 'A' + (c-'A'+13)%26
		}
		vastus += string(c)
	}
	return vastus
}

// Encrypt the message with reverse
func encrypt_reverse(s string) string {
	runes := []rune(s)                 // Muudab inputi ehk 's' runedeks, määrab nad var runes
	vastus := make([]rune, len(runes)) // Tekitatakse var mis on sama pikk kui input
	for i, char := range runes {       // Alustab loopi kuni jõuab input runedeni.
		if char >= 'a' && char <= 'z' { // Kontroll kas suur või väike täht
			vastus[i] = 'z' - (char - 'a') // Muudab tähed vastupidiseks
		} else if char >= 'A' && char <= 'Z' {
			vastus[i] = 'Z' - (char - 'A')
		} else {
			vastus[i] = char // Kui tegu ei ole tähega siis ei muudeta midagi.
		}
	}
	return string(vastus) // returnib stringina.
}

// Encrypt custom
func encrypt_custom(s string) string { // This script passes each letter 3 steps forward
	liigutus := 3
	runes := []rune(s)
	vastus := make([]rune, len(runes))
	for i, char := range runes {
		if char >= 'a' && char <= 'z' {
			vastus[i] = 'a' - (char - 'z' + rune(liigutus))
		} else if char >= 'A' && char <= 'Z' {
			vastus[i] = 'A' - (char - 'Z' + rune(liigutus))
		} else {
			vastus[i] = char
		}
	}
	return string(vastus)
}

// Decrypt the message with rot13
func decrypt_rot13(s string) string {
	return encrypt_rot13(s)
}

// Decrypt the message with reverse
func decrypt_reverse(s string) string {
	return encrypt_reverse(s) // This part just reverses the script
}

// Decrypt custom
func decrypt_custom(s string) string {
	liigutus := 3
	runes := []rune(s)
	vastus := make([]rune, len(runes))
	for i, char := range runes {
		if char >= 'a' && char <= 'z' {
			vastus[i] = 'z' - (char - 'a' + rune(liigutus))
		} else if char >= 'A' && char <= 'Z' {
			vastus[i] = 'Z' - (char - 'A' + rune(liigutus))
		} else {
			vastus[i] = char
		}
	}
	return string(vastus)
}
